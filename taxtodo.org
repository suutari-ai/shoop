#+TITLE: Tax system: Fix, polish, document (SHOOP-975)

* TODOs [3/20]

** DONE Improve PriceInfo: quantity, docs, tests
** DONE Currency support to Money (with tests)
** STARTED Improve docstrings of Price, Money
** TODO Unit tests for bankers_round(Price)
** DONE Implement CurrencyField
** STARTED Add Money/Price properties to models
  - [-] Create MoneyProperty and PriceProperty classes
    - [X] Implement MoneyProperty and PriceProperty
    - [X] Unit tests for MoneyProperty and PriceProperty
    - [-] Docs for MoneyProperty and PriceProperty
  - [-] Rename MoneyField to MoneyValueField
    - [ ] Check all MoneyField usages and add MoneyProperty or PriceProperty
    - [X] Check all "amount" usages
    - [ ] Fix callers of model init and objects.create
    - [ ] Fix users of amount/price fields
      - [ ] Order.cache_prices
      - [ ] OrderCreator.add_line_taxes
      - [ ] OrderLine.total_tax_amount
      - [ ] Method.module_data
    - [ ] Check all MoneyField usages after merging master (and convert
      to MoneyValueField and add properties)
    - [ ] Check all "amount" usages after merging master
** STARTED Check usages of module_data of Methods for prices
** STARTED Check when taxes are determined and amend that
** STARTED OrderSource tuning
  - [ ] Docstrings
  - [-] Make calculate_taxes explicit
  - [-] Implement auto-calculate taxes
    - [X] Add flag to OrderSource and use it
    - [ ] Add getter to TaxModule?
  - [-] Get rid of OrderSource.uncache
    - but wait... see `source.shipping_address.postal_code = "11111"` in test_tax_system
    - [-] Check all callers of uncache
    - [-] Implement automatic uncaching
      - [-] Refactor OrderSource.lines to OrderSource.add_line
      - [ ] What else is needed?
  - [ ] Improve price de/serialization
  - [ ] Check test coverage
  - [ ] Add and improve tests
** STARTED Check type specifiers in docstring for Price/Money params and rtypes
  - [ ] Check all "type.*amount" lines
  - [ ] Check all "param.*Decimal.*amount" lines
  - [ ] Check all "type.*price" lines
  - [ ] Check all "param.*Decimal.*price" lines
  - [ ] Check all "type.*money" lines
  - [ ] Check all "param.*Decimal.*money" lines
  - [ ] Check all "type.*tax" lines
  - [ ] Check all "param.*Decimal.*tax" lines
  - [ ] Check these again after merging master
** TODO Make tax Admin views work again (and test them through)
** STARTED Make sure that basket with differing currency/taxness cannot be loaded
** STARTED Make sure that all prices are created with Shop.create_price
** STARTED Check SHOOP_HOME_CURRENCY usages and replace with Shop.currency
** STARTED Jinja filter for Money
  - [X] Implement the filter/formatter
  - [X] Unit tests for the new filter/formatter
  - [X] Use the new filter (instead of home_currency)
  - [ ] Replace home_currencys after merging master
** TODO TaxAwarePriceInfo
** TODO Jinja filters for (TaxAware)PriceInfo
  - [X] Implement the filter/formatter
  - [X] Unit tests for the new filter/formatter
  - [X] Use the new filter (instead of home_currency)
  - [ ] Replace home_currencys after merging master
** TODO Make value-added taxes work (_calculate_taxes)
** TODO Make compound taxes raise a NYI error (_calculate_taxes)
** TODO Add MoneyPropped to all MoneyPropery users
** TODO Add new contacts  to a tax_group automatically
  - [ ] PersonContacts to "Retail customers" tax_group
  - [ ] CompanyContacts to "Wholesale customers" tax_group
** STARTED Add tax_group to Customer Admin module
** STARTED Make tax_group optional on TaxRule
  - [X] Make the TaxRule Admin form savable with no tax_groups
  - [ ] Add help text that "no tax groups means that it matches all tax groups"
** STARTED Add customer_tax_number various places
  - [X] To TaxingContext
  - [ ] To CompanyContact: Rename vat_code to tax_number
  - [ ] To Address: Rename vat_code to tax_number
  - [ ] To Order: Rename vat_code to tax_number
  - [ ] Unify lengths of tax_number fields in CompanyContact, Address, Order, OrderForm
  - [X] Generalize VAT code validation to more usable for international use
  - [ ] What else?
** STARTED Write general tax system documentation
  - [ ] Merchant documentatiin
  - [ ] Developer documentation
** TODO Test order creating from basket (from UI)
** TODO Test order processing in Admin (from UI)
** TODO Test shipping with and without ShippingMethod price (from UI)
** TODO Test payment creating (with and without paymentmethod price) (from UI)
** TODO Check all the TAX TODOs from code again
** TODO Organize changes to nice sequence of commits and PRs
  - [ ] MoneyField -> MoneyValueField
  - [ ] Currency support to Money
  - [ ]
  - [ ] Tax system documentation
  - [ ] Doc generating settings
  - [ ] Generate new API documentation templates

* Notes

** When are taxes determined

 1. In basket confirm:
    - ConfirmPhase.get_context_data
    - BaseBasket.get_validation_errors
    - OrderSource.get_final_lines
    - OrderSource._compute_processed_lines
    - OrderSource._compute_taxes

 2. Saving basket to database
    - DatabaseBasketStorage.save
    - OrderSource.taxless_total_price / OrderSource.taxful_total_price
    - OrderSource.get_final_lines
    - OrderSource._compute_processed_lines

    - OrderSource._compute_taxes
